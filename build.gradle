apply plugin: "java"
apply plugin: "maven-publish"

group = 'com.github.MinRi2'

sourceSets.main.java.srcDirs = ["src"]

java{
    targetCompatibility = 8
    sourceCompatibility = 16
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    mindustryXVersion = 'ca40f700fb'
    uncVersion = '2.2.0'

    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    modDir = "${System.getenv("APPDATA")}\\Mindustry\\mods"
}

allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
        options.encoding("UTF-8")
    }

    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }
}

configure([":core"].collect{
    project(it)
}){
    apply plugin: "java"
    apply plugin: "maven-publish"

    publishing {
        publications {
            release(MavenPublication) {
                groupId "com.github.MinRi2"
                artifactId 'MinModCore'
                version "local"
                from components.java
            }
        }
    }
}

project(':core'){
    dependencies{
        annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion" // 使用Unc注解处理器替代jabel
        compileOnly "com.github.anuken.arc:arc-core:$mindustryVersion"
        compileOnly "com.github.TinyLake.MindustryX:core:$mindustryXVersion"
    }
}

dependencies{
    implementation project(":core")
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task compileAndCopy{
    dependsOn jar

    doLast{
        copy{
            from "$buildDir/libs/"
            into "$modDir/"
            include "${project.archivesBaseName}Desktop.jar"
        }
    }
}